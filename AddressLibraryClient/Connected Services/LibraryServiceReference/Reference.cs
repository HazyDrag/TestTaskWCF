//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AddressLibraryClient.LibraryServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Address", Namespace="http://schemas.datacontract.org/2004/07/AddressLibraryService")]
    [System.SerializableAttribute()]
    public partial class Address : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HouseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RegionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StreetField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Country {
            get {
                return this.CountryField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryField, value) != true)) {
                    this.CountryField = value;
                    this.RaisePropertyChanged("Country");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string House {
            get {
                return this.HouseField;
            }
            set {
                if ((object.ReferenceEquals(this.HouseField, value) != true)) {
                    this.HouseField = value;
                    this.RaisePropertyChanged("House");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Region {
            get {
                return this.RegionField;
            }
            set {
                if ((object.ReferenceEquals(this.RegionField, value) != true)) {
                    this.RegionField = value;
                    this.RaisePropertyChanged("Region");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Street {
            get {
                return this.StreetField;
            }
            set {
                if ((object.ReferenceEquals(this.StreetField, value) != true)) {
                    this.StreetField = value;
                    this.RaisePropertyChanged("Street");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Description", Namespace="http://schemas.datacontract.org/2004/07/AddressLibraryService")]
    [System.SerializableAttribute()]
    public partial class Description : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LibraryServiceReference.ILibrary")]
    public interface ILibrary {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILibrary/TestConnection", ReplyAction="http://tempuri.org/ILibrary/TestConnectionResponse")]
        string TestConnection();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILibrary/TestConnection", ReplyAction="http://tempuri.org/ILibrary/TestConnectionResponse")]
        System.Threading.Tasks.Task<string> TestConnectionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILibrary/UserNameValidator", ReplyAction="http://tempuri.org/ILibrary/UserNameValidatorResponse")]
        bool UserNameValidator(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILibrary/UserNameValidator", ReplyAction="http://tempuri.org/ILibrary/UserNameValidatorResponse")]
        System.Threading.Tasks.Task<bool> UserNameValidatorAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILibrary/ReadAllLibrary", ReplyAction="http://tempuri.org/ILibrary/ReadAllLibraryResponse")]
        AddressLibraryClient.LibraryServiceReference.Address[] ReadAllLibrary();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILibrary/ReadAllLibrary", ReplyAction="http://tempuri.org/ILibrary/ReadAllLibraryResponse")]
        System.Threading.Tasks.Task<AddressLibraryClient.LibraryServiceReference.Address[]> ReadAllLibraryAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILibrary/EditAddress", ReplyAction="http://tempuri.org/ILibrary/EditAddressResponse")]
        string EditAddress(AddressLibraryClient.LibraryServiceReference.Address address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILibrary/EditAddress", ReplyAction="http://tempuri.org/ILibrary/EditAddressResponse")]
        System.Threading.Tasks.Task<string> EditAddressAsync(AddressLibraryClient.LibraryServiceReference.Address address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILibrary/ReadDescription", ReplyAction="http://tempuri.org/ILibrary/ReadDescriptionResponse")]
        string ReadDescription(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILibrary/ReadDescription", ReplyAction="http://tempuri.org/ILibrary/ReadDescriptionResponse")]
        System.Threading.Tasks.Task<string> ReadDescriptionAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILibrary/EditDescription", ReplyAction="http://tempuri.org/ILibrary/EditDescriptionResponse")]
        string EditDescription(AddressLibraryClient.LibraryServiceReference.Description description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILibrary/EditDescription", ReplyAction="http://tempuri.org/ILibrary/EditDescriptionResponse")]
        System.Threading.Tasks.Task<string> EditDescriptionAsync(AddressLibraryClient.LibraryServiceReference.Description description);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILibraryChannel : AddressLibraryClient.LibraryServiceReference.ILibrary, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LibraryClient : System.ServiceModel.ClientBase<AddressLibraryClient.LibraryServiceReference.ILibrary>, AddressLibraryClient.LibraryServiceReference.ILibrary {
        
        public LibraryClient() {
        }
        
        public LibraryClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LibraryClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LibraryClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LibraryClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string TestConnection() {
            return base.Channel.TestConnection();
        }
        
        public System.Threading.Tasks.Task<string> TestConnectionAsync() {
            return base.Channel.TestConnectionAsync();
        }
        
        public bool UserNameValidator(string login, string password) {
            return base.Channel.UserNameValidator(login, password);
        }
        
        public System.Threading.Tasks.Task<bool> UserNameValidatorAsync(string login, string password) {
            return base.Channel.UserNameValidatorAsync(login, password);
        }
        
        public AddressLibraryClient.LibraryServiceReference.Address[] ReadAllLibrary() {
            return base.Channel.ReadAllLibrary();
        }
        
        public System.Threading.Tasks.Task<AddressLibraryClient.LibraryServiceReference.Address[]> ReadAllLibraryAsync() {
            return base.Channel.ReadAllLibraryAsync();
        }
        
        public string EditAddress(AddressLibraryClient.LibraryServiceReference.Address address) {
            return base.Channel.EditAddress(address);
        }
        
        public System.Threading.Tasks.Task<string> EditAddressAsync(AddressLibraryClient.LibraryServiceReference.Address address) {
            return base.Channel.EditAddressAsync(address);
        }
        
        public string ReadDescription(int id) {
            return base.Channel.ReadDescription(id);
        }
        
        public System.Threading.Tasks.Task<string> ReadDescriptionAsync(int id) {
            return base.Channel.ReadDescriptionAsync(id);
        }
        
        public string EditDescription(AddressLibraryClient.LibraryServiceReference.Description description) {
            return base.Channel.EditDescription(description);
        }
        
        public System.Threading.Tasks.Task<string> EditDescriptionAsync(AddressLibraryClient.LibraryServiceReference.Description description) {
            return base.Channel.EditDescriptionAsync(description);
        }
    }
}
